!function e(t,n,o){function r(s,a){if(!n[s]){if(!t[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);throw new Error("Cannot find module '"+s+"'")}var l=n[s]={exports:{}};t[s][0].call(l.exports,function(e){var n=t[s][1][e];return r(n?n:e)},l,l.exports,e,t,n,o)}return n[s].exports}for(var i="function"==typeof require&&require,s=0;s<o.length;s++)r(o[s]);return r}({1:[function(e,t,n){(function(){"use strict";var t=e("../models/albums").modelAlbums,o=Backbone.Collection.extend({model:t,url:"http://picasaweb.google.com/data/feed/api/user/",sync:function(e,t,n){return n.dataType="jsonp",n.data={alt:"json-in-script"},Backbone.sync(e,this,n)},parse:function(e){return console.info(this),e.data},read:function(e,t){e={alt:"json-in-script"};var n="jsonp";Backbone.sync("read",this,{data:e,dataType:n,success:function(e){t.reset(e.feed.entry),t.trigger("change")},error:function(){console.log("Error!")}})}});n.collectionAlbums=new o}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/collections/albums.js","/collections")},{"../models/albums":5,"1YiZ5S":24,buffer:21}],2:[function(e,t,n){(function(){"use strict";var t=e("../models/photos").modelPhotos,o=Backbone.Collection.extend({model:t,url:"http://picasaweb.google.com/data/feed/api/user/",sync:function(e,t,n){return n.dataType="jsonp",n.data={alt:"json-in-script"},Backbone.sync(e,this,n)},parse:function(e){return console.info(this),e.data},read:function(e,t){e={alt:"json-in-script"};var n="jsonp";Backbone.sync("read",this,{data:e,dataType:n,success:function(e){t.reset(e.feed.entry),t.trigger("change")},error:function(){console.log("Error!")}})}});n.collectionPhotos=new o}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/collections/photos.js","/collections")},{"../models/photos":6,"1YiZ5S":24,buffer:21}],3:[function(e,t,n){(function(){n.params={data_clientid:"622241792840-25snlfbmjo2n02ok4scios08428gisgg.apps.googleusercontent.com",data_cookiepolicy:"single_host_origin",data_requestvisibleactions:"http://schemas.google.com/AddActivity",data_scope:"https://www.googleapis.com/auth/plus.login",revokeButtom_title:"выйти"}}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/config.js","/")},{"1YiZ5S":24,buffer:21}],4:[function(e){(function(){"use strict";var t=window.myApp={},n=window.gapi;t.config=e("./config"),t.modelUser=e("./models/user").modelUser,t.routers=e("./routers").routers,e("./views/user");var o={auth:_.template(e("./templates/auth.html"))};$("#auth").html(o.auth(t.config.params)),e("./views/albums"),e("./views/photos"),e("./views/status"),t.routers.routes["*notFound"]="page404",window.connectUser=function(e){var o=Backbone.Router.extend(t.routers),r=new o,i=location.pathname,s=i.slice(1);r.navigate(s,{trigger:!0}),Backbone.emulateJSON=!0,e.access_token?(document.getElementById("signinButton").style.display="none",document.getElementById("revokeButton").style.display="block",n.auth.setToken(e),n.client.load("oauth2","v2",function(){var e=n.client.oauth2.userinfo.get();e.execute(function(e){t.modelUser.set(e)})}),Backbone.history.start({pushState:!0})):e.error&&(console.log("There was an error: "+e.error),document.getElementById("signinButton").style.display="inline-block")}}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_b8197d06.js","/")},{"./config":3,"./models/user":7,"./routers":8,"./templates/auth.html":11,"./views/albums":17,"./views/photos":18,"./views/status":19,"./views/user":20,"1YiZ5S":24,buffer:21}],5:[function(e,t,n){(function(){var e=Backbone.Model.extend({idAttribute:"_id"});n.modelAlbums=e}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/models/albums.js","/models")},{"1YiZ5S":24,buffer:21}],6:[function(e,t,n){(function(){var e=Backbone.Model.extend({idAttribute:"_id"});n.modelPhotos=e}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/models/photos.js","/models")},{"1YiZ5S":24,buffer:21}],7:[function(e,t,n){(function(){var e=Backbone.Model.extend({});n.modelUser=window.myApp.modelUser=new e}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/models/user.js","/models")},{"1YiZ5S":24,buffer:21}],8:[function(e,t,n){(function(){"use strict";n.routers={routes:{"":"default"},"default":function(){var t=e("./views/albums").viewAlbums;window.myApp.Albums=new t},page404:function(){var t=_.template(e("./templates/404.html"));$("#content").html(t())}}}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/routers.js","/")},{"./templates/404.html":9,"./views/albums":17,"1YiZ5S":24,buffer:21}],9:[function(e,t){(function(){t.exports="<h1>404</h1>"}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/templates/404.html","/templates")},{"1YiZ5S":24,buffer:21}],10:[function(e,t){(function(){t.exports='<li class="clearfix" data-album_id="<%= album.gphoto$id.$t%>">\n    <img  src="<%= album.media$group.media$thumbnail[0].url%>" alt=""/>\n    <div class="info ">\n        <h2><%= album.media$group.media$title.$t%></h2>\n        <span class="icon-inbox  files"><%= album.gphoto$numphotos.$t%> files</span>\n        <span class="icon-time time"><%= agoDate%><!--2 hours ago--></span>\n    </div>\n    <i class="icon-double-angle-right dar"></i>\n</li>'}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/templates/album.html","/templates")},{"1YiZ5S":24,buffer:21}],11:[function(e,t){(function(){t.exports='<div class="auth">\n    <span id="signinButton" class="signinButton" >\n          <span\n                  class="g-signin"\n                  data-callback="connectUser"\n                  data-clientid=<%= data_clientid%>\n                  data-cookiepolicy="<%= data_cookiepolicy%>"\n                  data-requestvisibleactions="<%= data_requestvisibleactions%>"\n                  data-scope="<%= data_scope%>">\n          </span>\n    </span>\n    <span id="revokeButton" class="revokeButton"><%= revokeButtom_title%></span>\n</div>'}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/templates/auth.html","/templates")},{"1YiZ5S":24,buffer:21}],12:[function(e,t){(function(){t.exports='<img  src="<%= media$group.media$content[0].url%>" alt=""/>\n<div class="info">\n    <table>\n        <tr>\n            <td >File name:</td>\n            <td><%= media$group.media$title.$t%></td>\n        </tr>\n        <tr>\n            <td>Object:</td>\n            <td><%= title.$t%></td>\n        </tr>\n        <tr>\n            <td>Caption:</td>\n            <td>\n                <%= media$group.media$description.$t%>\n            </td>\n        </tr>\n        <!--<tr>\n            <td>Keywords:</td>\n            <td>\n                <span>Artress</span>\n                <span>Star</span>\n                <span>Red carpet</span>\n            </td>\n        </tr>-->\n    </table>\n</div>'}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/templates/photo.html","/templates")},{"1YiZ5S":24,buffer:21}],13:[function(e,t){(function(){t.exports='<li class="clearfix" >\n    <img  src="<%= media$group.media$thumbnail[1].url%>" alt=""/>\n    <div class="controll">\n        <span class="icon-ok"></span>\n        <a href="#" data-photo_id="<%= gphoto$id.$t%>" >Select</a>\n        <span class="tooltip ">\n                            <div class="clearfix">\n                                <div class="col-left">File name:</div><div class="col-right"><%= media$group.media$title.$t%></div>\n                                <div class="col-left">Object:</div><div class="col-right"><%= title.$t%></div>\n\n                                <% if(media$group.media$description.$t) {%>\n                                    <div class="col-left">Caption:</div><div class="col-right">\n                                        <%= media$group.media$description.$t%>\n                                    </div>\n                                <%}%>\n                            </div>\n                        </span>\n    </div>\n\n</li>'}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/templates/photoAlbum.html","/templates")},{"1YiZ5S":24,buffer:21}],14:[function(e,t){(function(){t.exports='<span class="icon-angle-left back" id="back"></span>\n<h2 class="icon-folder-close album_name "><%= title_album%></h2>'}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/templates/status_album.html","/templates")},{"1YiZ5S":24,buffer:21}],15:[function(e,t){(function(){t.exports='<span class="icon-angle-left back" id="back"></span>\n<h2 class="icon-folder-close file_name "><%= title_photo%></h2>'}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/templates/status_photo.html","/templates")},{"1YiZ5S":24,buffer:21}],16:[function(e,t){(function(){t.exports='<h2 class="icon-folder-close file_name "><%= name%></h2>\n'}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/templates/status_user.html","/templates")},{"1YiZ5S":24,buffer:21}],17:[function(e,t,n){(function(){var t=Backbone.View.extend({template:{album:_.template(e("../templates/album.html")),status_album:_.template(e("../templates/status_album.html"))},el:"#listAlbum",events:{"click  li":"getPhotosAlbum"},initialize:function(){this.modelUser=e("../models/user").modelUser,this.collectionAlbums=e("../collections/albums").collectionAlbums,this.collectionPhotos=e("../collections/photos").collectionPhotos,this.modelUser.on("change",this.getAlbums,this),this.collectionAlbums.on("reset",this.showAlbums,this)},getAlbums:function(){if(_.isEmpty(this.modelUser.toJSON().id))return!1;var e=this.collectionAlbums.url;this.collectionAlbums.url+=this.modelUser.toJSON().id,this.collectionAlbums.read({},this.collectionAlbums),this.collectionAlbums.url=e},showAlbums:function(){var e=this;this.$el.empty(),window.myApp.page="albums",this.collectionAlbums.each(function(t){var n=moment(t.toJSON().published.$t).fromNow(),o=e.template.album({album:t.toJSON(),agoDate:n});$(o).appendTo("#listAlbum")})},getPhotosAlbum:function(e){this.$el.empty(),window.myApp.page="album";var t=$(e.currentTarget).attr("data-album_id"),n=this.collectionPhotos.url;this.collectionPhotos.url+=this.modelUser.toJSON().id,this.collectionPhotos.url+="/albumid/"+t,this.collectionPhotos.read({},this.collectionPhotos),this.collectionPhotos.url=n;var o=_.find(this.collectionAlbums.toJSON(),function(e){return e.gphoto$id.$t===t?e:void 0}),r=window.myApp.statusCurrAlbumHtml=this.template.status_album({title_album:o.title.$t});$("#album_status").html(r)}});myApp.routers.routes.album="albums",myApp.routers.albums=function(){new t},n.viewAlbums=t}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/views/albums.js","/views")},{"../collections/albums":1,"../collections/photos":2,"../models/user":7,"../templates/album.html":10,"../templates/status_album.html":14,"1YiZ5S":24,buffer:21}],18:[function(e,t,n){(function(){var t=Backbone.View.extend({template:{photoAlbum:_.template(e("../templates/photoAlbum.html")),photo:_.template(e("../templates/photo.html"))},el:"#photosAlbum",events:{"click  li .controll a":"showPhoto"},initialize:function(){this.modelUser=e("../models/user").modelUser,this.collectionAlbums=e("../collections/albums").collectionAlbums,this.collectionPhotos=e("../collections/photos").collectionPhotos,this.collectionPhotos.on("change",this.showPhotos,this)},showPhotos:function(){var e=this;this.$el.empty(),window.myApp.page="album",this.collectionPhotos.each(function(t){$(e.template.photoAlbum(t.toJSON())).appendTo("#photosAlbum")})},showPhoto:function(e){this.$el.empty(),window.myApp.page="photo";var t=$(e.currentTarget).attr("data-photo_id"),n=_.find(this.collectionPhotos.toJSON(),function(e){return e.gphoto$id.$t===t?e:void 0});myApp.Status.setStatusPhoto(n.title.$t),$("#selectedPhoto").html(this.template.photo(n))}});n.viewPhotos=window.myApp.Photos=new t}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/views/photos.js","/views")},{"../collections/albums":1,"../collections/photos":2,"../models/user":7,"../templates/photo.html":12,"../templates/photoAlbum.html":13,"1YiZ5S":24,buffer:21}],19:[function(e,t,n){(function(){var t=Backbone.View.extend({template:{status_photo:_.template(e("../templates/status_photo.html")),status_user:_.template(e("../templates/status_user.html"))},el:"#album_status",events:{"click  #back":"back"},initialize:function(){myApp.modelUser.on("change",this.setStatusUserName,this)},setStatusPhoto:function(e){this.$el.html(this.template.status_photo({title_photo:e}))},setStatusAlbum:function(){this.$el.html(myApp.statusCurrAlbumHtml)},setStatusUserName:function(){this.$el.html(this.template.status_user({name:myApp.modelUser.toJSON().name}))},back:function(){"album"===myApp.page&&($("#photosAlbum").empty(),myApp.Albums.showAlbums(),this.setStatusUserName()),"photo"===myApp.page&&($("#selectedPhoto").empty(),myApp.Photos.showPhotos(),this.setStatusAlbum())}});n.viewStatus=window.myApp.Status=new t}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/views/status.js","/views")},{"../templates/status_photo.html":15,"../templates/status_user.html":16,"1YiZ5S":24,buffer:21}],20:[function(e,t,n){(function(){var t=Backbone.View.extend({events:{"click  #revokeButton":"revokeButton"},initialize:function(){this.modelUser=e("../models/user").modelUser},revokeButton:function(){gapi.auth.signOut(),window.location.reload()}});n.viewUser=window.myApp.viewUser=new t}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/views/user.js","/views")},{"../models/user":7,"1YiZ5S":24,buffer:21}],21:[function(e,t,n){(function(t,o,r){function r(e,t,n){if(!(this instanceof r))return new r(e,t,n);var o=typeof e;if("base64"===t&&"string"===o)for(e=$(e);e.length%4!==0;)e+="=";var i;if("number"===o)i=Y(e);else if("string"===o)i=r.byteLength(e,t);else{if("object"!==o)throw new Error("First argument needs to be a number, array or string.");i=Y(e.length)}var s;r._useTypedArrays?s=r._augment(new Uint8Array(i)):(s=this,s.length=i,s._isBuffer=!0);var a;if(r._useTypedArrays&&"number"==typeof e.byteLength)s._set(e);else if(x(e))for(a=0;i>a;a++)s[a]=r.isBuffer(e)?e.readUInt8(a):e[a];else if("string"===o)s.write(e,0,t);else if("number"===o&&!r._useTypedArrays&&!n)for(a=0;i>a;a++)s[a]=0;return s}function i(e,t,n,o){n=Number(n)||0;var i=e.length-n;o?(o=Number(o),o>i&&(o=i)):o=i;var s=t.length;q(s%2===0,"Invalid hex string"),o>s/2&&(o=s/2);for(var a=0;o>a;a++){var u=parseInt(t.substr(2*a,2),16);q(!isNaN(u),"Invalid hex string"),e[n+a]=u}return r._charsWritten=2*a,a}function s(e,t,n,o){var i=r._charsWritten=M(T(t),e,n,o);return i}function a(e,t,n,o){var i=r._charsWritten=M(N(t),e,n,o);return i}function u(e,t,n,o){return a(e,t,n,o)}function l(e,t,n,o){var i=r._charsWritten=M(P(t),e,n,o);return i}function f(e,t,n,o){var i=r._charsWritten=M(C(t),e,n,o);return i}function d(e,t,n){return z.fromByteArray(0===t&&n===e.length?e:e.slice(t,n))}function c(e,t,n){var o="",r="";n=Math.min(e.length,n);for(var i=t;n>i;i++)e[i]<=127?(o+=F(r)+String.fromCharCode(e[i]),r=""):r+="%"+e[i].toString(16);return o+F(r)}function m(e,t,n){var o="";n=Math.min(e.length,n);for(var r=t;n>r;r++)o+=String.fromCharCode(e[r]);return o}function h(e,t,n){return m(e,t,n)}function p(e,t,n){var o=e.length;(!t||0>t)&&(t=0),(!n||0>n||n>o)&&(n=o);for(var r="",i=t;n>i;i++)r+=j(e[i]);return r}function g(e,t,n){for(var o=e.slice(t,n),r="",i=0;i<o.length;i+=2)r+=String.fromCharCode(o[i]+256*o[i+1]);return r}function b(e,t,n,o){o||(q("boolean"==typeof n,"missing or invalid endian"),q(void 0!==t&&null!==t,"missing offset"),q(t+1<e.length,"Trying to read beyond buffer length"));var r=e.length;if(!(t>=r)){var i;return n?(i=e[t],r>t+1&&(i|=e[t+1]<<8)):(i=e[t]<<8,r>t+1&&(i|=e[t+1])),i}}function w(e,t,n,o){o||(q("boolean"==typeof n,"missing or invalid endian"),q(void 0!==t&&null!==t,"missing offset"),q(t+3<e.length,"Trying to read beyond buffer length"));var r=e.length;if(!(t>=r)){var i;return n?(r>t+2&&(i=e[t+2]<<16),r>t+1&&(i|=e[t+1]<<8),i|=e[t],r>t+3&&(i+=e[t+3]<<24>>>0)):(r>t+1&&(i=e[t+1]<<16),r>t+2&&(i|=e[t+2]<<8),r>t+3&&(i|=e[t+3]),i+=e[t]<<24>>>0),i}}function y(e,t,n,o){o||(q("boolean"==typeof n,"missing or invalid endian"),q(void 0!==t&&null!==t,"missing offset"),q(t+1<e.length,"Trying to read beyond buffer length"));var r=e.length;if(!(t>=r)){var i=b(e,t,n,!0),s=32768&i;return s?-1*(65535-i+1):i}}function v(e,t,n,o){o||(q("boolean"==typeof n,"missing or invalid endian"),q(void 0!==t&&null!==t,"missing offset"),q(t+3<e.length,"Trying to read beyond buffer length"));var r=e.length;if(!(t>=r)){var i=w(e,t,n,!0),s=2147483648&i;return s?-1*(4294967295-i+1):i}}function A(e,t,n,o){return o||(q("boolean"==typeof n,"missing or invalid endian"),q(t+3<e.length,"Trying to read beyond buffer length")),W.read(e,t,n,23,4)}function B(e,t,n,o){return o||(q("boolean"==typeof n,"missing or invalid endian"),q(t+7<e.length,"Trying to read beyond buffer length")),W.read(e,t,n,52,8)}function _(e,t,n,o,r){r||(q(void 0!==t&&null!==t,"missing value"),q("boolean"==typeof o,"missing or invalid endian"),q(void 0!==n&&null!==n,"missing offset"),q(n+1<e.length,"trying to write beyond buffer length"),O(t,65535));var i=e.length;if(!(n>=i))for(var s=0,a=Math.min(i-n,2);a>s;s++)e[n+s]=(t&255<<8*(o?s:1-s))>>>8*(o?s:1-s)}function S(e,t,n,o,r){r||(q(void 0!==t&&null!==t,"missing value"),q("boolean"==typeof o,"missing or invalid endian"),q(void 0!==n&&null!==n,"missing offset"),q(n+3<e.length,"trying to write beyond buffer length"),O(t,4294967295));var i=e.length;if(!(n>=i))for(var s=0,a=Math.min(i-n,4);a>s;s++)e[n+s]=t>>>8*(o?s:3-s)&255}function E(e,t,n,o,r){r||(q(void 0!==t&&null!==t,"missing value"),q("boolean"==typeof o,"missing or invalid endian"),q(void 0!==n&&null!==n,"missing offset"),q(n+1<e.length,"Trying to write beyond buffer length"),D(t,32767,-32768));var i=e.length;n>=i||(t>=0?_(e,t,n,o,r):_(e,65535+t+1,n,o,r))}function I(e,t,n,o,r){r||(q(void 0!==t&&null!==t,"missing value"),q("boolean"==typeof o,"missing or invalid endian"),q(void 0!==n&&null!==n,"missing offset"),q(n+3<e.length,"Trying to write beyond buffer length"),D(t,2147483647,-2147483648));var i=e.length;n>=i||(t>=0?S(e,t,n,o,r):S(e,4294967295+t+1,n,o,r))}function k(e,t,n,o,r){r||(q(void 0!==t&&null!==t,"missing value"),q("boolean"==typeof o,"missing or invalid endian"),q(void 0!==n&&null!==n,"missing offset"),q(n+3<e.length,"Trying to write beyond buffer length"),J(t,3.4028234663852886e38,-3.4028234663852886e38));var i=e.length;n>=i||W.write(e,t,n,o,23,4)}function U(e,t,n,o,r){r||(q(void 0!==t&&null!==t,"missing value"),q("boolean"==typeof o,"missing or invalid endian"),q(void 0!==n&&null!==n,"missing offset"),q(n+7<e.length,"Trying to write beyond buffer length"),J(t,1.7976931348623157e308,-1.7976931348623157e308));var i=e.length;n>=i||W.write(e,t,n,o,52,8)}function $(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function L(e,t,n){return"number"!=typeof e?n:(e=~~e,e>=t?t:e>=0?e:(e+=t,e>=0?e:0))}function Y(e){return e=~~Math.ceil(+e),0>e?0:e}function Z(e){return(Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)})(e)}function x(e){return Z(e)||r.isBuffer(e)||e&&"object"==typeof e&&"number"==typeof e.length}function j(e){return 16>e?"0"+e.toString(16):e.toString(16)}function T(e){for(var t=[],n=0;n<e.length;n++){var o=e.charCodeAt(n);if(127>=o)t.push(e.charCodeAt(n));else{var r=n;o>=55296&&57343>=o&&n++;for(var i=encodeURIComponent(e.slice(r,n+1)).substr(1).split("%"),s=0;s<i.length;s++)t.push(parseInt(i[s],16))}}return t}function N(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t}function C(e){for(var t,n,o,r=[],i=0;i<e.length;i++)t=e.charCodeAt(i),n=t>>8,o=t%256,r.push(o),r.push(n);return r}function P(e){return z.toByteArray(e)}function M(e,t,n,o){for(var r=0;o>r&&!(r+n>=t.length||r>=e.length);r++)t[r+n]=e[r];return r}function F(e){try{return decodeURIComponent(e)}catch(t){return String.fromCharCode(65533)}}function O(e,t){q("number"==typeof e,"cannot write a non-number as a number"),q(e>=0,"specified a negative value for writing an unsigned value"),q(t>=e,"value is larger than maximum value for type"),q(Math.floor(e)===e,"value has a fractional component")}function D(e,t,n){q("number"==typeof e,"cannot write a non-number as a number"),q(t>=e,"value larger than maximum allowed value"),q(e>=n,"value smaller than minimum allowed value"),q(Math.floor(e)===e,"value has a fractional component")}function J(e,t,n){q("number"==typeof e,"cannot write a non-number as a number"),q(t>=e,"value larger than maximum allowed value"),q(e>=n,"value smaller than minimum allowed value")}function q(e,t){if(!e)throw new Error(t||"Failed assertion")}var z=e("base64-js"),W=e("ieee754");n.Buffer=r,n.SlowBuffer=r,n.INSPECT_MAX_BYTES=50,r.poolSize=8192,r._useTypedArrays=function(){try{var e=new ArrayBuffer(0),t=new Uint8Array(e);return t.foo=function(){return 42},42===t.foo()&&"function"==typeof t.subarray}catch(n){return!1}}(),r.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},r.isBuffer=function(e){return!(null===e||void 0===e||!e._isBuffer)},r.byteLength=function(e,t){var n;switch(e+="",t||"utf8"){case"hex":n=e.length/2;break;case"utf8":case"utf-8":n=T(e).length;break;case"ascii":case"binary":case"raw":n=e.length;break;case"base64":n=P(e).length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":n=2*e.length;break;default:throw new Error("Unknown encoding")}return n},r.concat=function(e,t){if(q(Z(e),"Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),0===e.length)return new r(0);if(1===e.length)return e[0];var n;if("number"!=typeof t)for(t=0,n=0;n<e.length;n++)t+=e[n].length;var o=new r(t),i=0;for(n=0;n<e.length;n++){var s=e[n];s.copy(o,i),i+=s.length}return o},r.prototype.write=function(e,t,n,o){if(isFinite(t))isFinite(n)||(o=n,n=void 0);else{var r=o;o=t,t=n,n=r}t=Number(t)||0;var d=this.length-t;n?(n=Number(n),n>d&&(n=d)):n=d,o=String(o||"utf8").toLowerCase();var c;switch(o){case"hex":c=i(this,e,t,n);break;case"utf8":case"utf-8":c=s(this,e,t,n);break;case"ascii":c=a(this,e,t,n);break;case"binary":c=u(this,e,t,n);break;case"base64":c=l(this,e,t,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":c=f(this,e,t,n);break;default:throw new Error("Unknown encoding")}return c},r.prototype.toString=function(e,t,n){var o=this;if(e=String(e||"utf8").toLowerCase(),t=Number(t)||0,n=void 0!==n?Number(n):n=o.length,n===t)return"";var r;switch(e){case"hex":r=p(o,t,n);break;case"utf8":case"utf-8":r=c(o,t,n);break;case"ascii":r=m(o,t,n);break;case"binary":r=h(o,t,n);break;case"base64":r=d(o,t,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":r=g(o,t,n);break;default:throw new Error("Unknown encoding")}return r},r.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},r.prototype.copy=function(e,t,n,o){var i=this;if(n||(n=0),o||0===o||(o=this.length),t||(t=0),o!==n&&0!==e.length&&0!==i.length){q(o>=n,"sourceEnd < sourceStart"),q(t>=0&&t<e.length,"targetStart out of bounds"),q(n>=0&&n<i.length,"sourceStart out of bounds"),q(o>=0&&o<=i.length,"sourceEnd out of bounds"),o>this.length&&(o=this.length),e.length-t<o-n&&(o=e.length-t+n);var s=o-n;if(100>s||!r._useTypedArrays)for(var a=0;s>a;a++)e[a+t]=this[a+n];else e._set(this.subarray(n,n+s),t)}},r.prototype.slice=function(e,t){var n=this.length;if(e=L(e,n,0),t=L(t,n,n),r._useTypedArrays)return r._augment(this.subarray(e,t));for(var o=t-e,i=new r(o,void 0,!0),s=0;o>s;s++)i[s]=this[s+e];return i},r.prototype.get=function(e){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(e)},r.prototype.set=function(e,t){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(e,t)},r.prototype.readUInt8=function(e,t){return t||(q(void 0!==e&&null!==e,"missing offset"),q(e<this.length,"Trying to read beyond buffer length")),e>=this.length?void 0:this[e]},r.prototype.readUInt16LE=function(e,t){return b(this,e,!0,t)},r.prototype.readUInt16BE=function(e,t){return b(this,e,!1,t)},r.prototype.readUInt32LE=function(e,t){return w(this,e,!0,t)},r.prototype.readUInt32BE=function(e,t){return w(this,e,!1,t)},r.prototype.readInt8=function(e,t){if(t||(q(void 0!==e&&null!==e,"missing offset"),q(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length)){var n=128&this[e];return n?-1*(255-this[e]+1):this[e]}},r.prototype.readInt16LE=function(e,t){return y(this,e,!0,t)},r.prototype.readInt16BE=function(e,t){return y(this,e,!1,t)},r.prototype.readInt32LE=function(e,t){return v(this,e,!0,t)},r.prototype.readInt32BE=function(e,t){return v(this,e,!1,t)},r.prototype.readFloatLE=function(e,t){return A(this,e,!0,t)},r.prototype.readFloatBE=function(e,t){return A(this,e,!1,t)},r.prototype.readDoubleLE=function(e,t){return B(this,e,!0,t)},r.prototype.readDoubleBE=function(e,t){return B(this,e,!1,t)},r.prototype.writeUInt8=function(e,t,n){n||(q(void 0!==e&&null!==e,"missing value"),q(void 0!==t&&null!==t,"missing offset"),q(t<this.length,"trying to write beyond buffer length"),O(e,255)),t>=this.length||(this[t]=e)},r.prototype.writeUInt16LE=function(e,t,n){_(this,e,t,!0,n)},r.prototype.writeUInt16BE=function(e,t,n){_(this,e,t,!1,n)},r.prototype.writeUInt32LE=function(e,t,n){S(this,e,t,!0,n)},r.prototype.writeUInt32BE=function(e,t,n){S(this,e,t,!1,n)},r.prototype.writeInt8=function(e,t,n){n||(q(void 0!==e&&null!==e,"missing value"),q(void 0!==t&&null!==t,"missing offset"),q(t<this.length,"Trying to write beyond buffer length"),D(e,127,-128)),t>=this.length||(e>=0?this.writeUInt8(e,t,n):this.writeUInt8(255+e+1,t,n))},r.prototype.writeInt16LE=function(e,t,n){E(this,e,t,!0,n)},r.prototype.writeInt16BE=function(e,t,n){E(this,e,t,!1,n)},r.prototype.writeInt32LE=function(e,t,n){I(this,e,t,!0,n)},r.prototype.writeInt32BE=function(e,t,n){I(this,e,t,!1,n)},r.prototype.writeFloatLE=function(e,t,n){k(this,e,t,!0,n)},r.prototype.writeFloatBE=function(e,t,n){k(this,e,t,!1,n)},r.prototype.writeDoubleLE=function(e,t,n){U(this,e,t,!0,n)},r.prototype.writeDoubleBE=function(e,t,n){U(this,e,t,!1,n)},r.prototype.fill=function(e,t,n){if(e||(e=0),t||(t=0),n||(n=this.length),"string"==typeof e&&(e=e.charCodeAt(0)),q("number"==typeof e&&!isNaN(e),"value is not a number"),q(n>=t,"end < start"),n!==t&&0!==this.length){q(t>=0&&t<this.length,"start out of bounds"),q(n>=0&&n<=this.length,"end out of bounds");for(var o=t;n>o;o++)this[o]=e}},r.prototype.inspect=function(){for(var e=[],t=this.length,o=0;t>o;o++)if(e[o]=j(this[o]),o===n.INSPECT_MAX_BYTES){e[o+1]="...";break}return"<Buffer "+e.join(" ")+">"},r.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(r._useTypedArrays)return new r(this).buffer;for(var e=new Uint8Array(this.length),t=0,n=e.length;n>t;t+=1)e[t]=this[t];return e.buffer}throw new Error("Buffer.toArrayBuffer not supported in this browser")};var R=r.prototype;r._augment=function(e){return e._isBuffer=!0,e._get=e.get,e._set=e.set,e.get=R.get,e.set=R.set,e.write=R.write,e.toString=R.toString,e.toLocaleString=R.toString,e.toJSON=R.toJSON,e.copy=R.copy,e.slice=R.slice,e.readUInt8=R.readUInt8,e.readUInt16LE=R.readUInt16LE,e.readUInt16BE=R.readUInt16BE,e.readUInt32LE=R.readUInt32LE,e.readUInt32BE=R.readUInt32BE,e.readInt8=R.readInt8,e.readInt16LE=R.readInt16LE,e.readInt16BE=R.readInt16BE,e.readInt32LE=R.readInt32LE,e.readInt32BE=R.readInt32BE,e.readFloatLE=R.readFloatLE,e.readFloatBE=R.readFloatBE,e.readDoubleLE=R.readDoubleLE,e.readDoubleBE=R.readDoubleBE,e.writeUInt8=R.writeUInt8,e.writeUInt16LE=R.writeUInt16LE,e.writeUInt16BE=R.writeUInt16BE,e.writeUInt32LE=R.writeUInt32LE,e.writeUInt32BE=R.writeUInt32BE,e.writeInt8=R.writeInt8,e.writeInt16LE=R.writeInt16LE,e.writeInt16BE=R.writeInt16BE,e.writeInt32LE=R.writeInt32LE,e.writeInt32BE=R.writeInt32BE,e.writeFloatLE=R.writeFloatLE,e.writeFloatBE=R.writeFloatBE,e.writeDoubleLE=R.writeDoubleLE,e.writeDoubleBE=R.writeDoubleBE,e.fill=R.fill,e.inspect=R.inspect,e.toArrayBuffer=R.toArrayBuffer,e}}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/index.js","/../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer")},{"1YiZ5S":24,"base64-js":22,buffer:21,ieee754:23}],22:[function(e,t,n){(function(){var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(t){"use strict";function n(e){var t=e.charCodeAt(0);return t===s?62:t===a?63:u>t?-1:u+10>t?t-u+26+26:f+26>t?t-f:l+26>t?t-l+26:void 0}function o(e){function t(e){l[d++]=e}var o,r,s,a,u,l;if(e.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var f=e.length;u="="===e.charAt(f-2)?2:"="===e.charAt(f-1)?1:0,l=new i(3*e.length/4-u),s=u>0?e.length-4:e.length;var d=0;for(o=0,r=0;s>o;o+=4,r+=3)a=n(e.charAt(o))<<18|n(e.charAt(o+1))<<12|n(e.charAt(o+2))<<6|n(e.charAt(o+3)),t((16711680&a)>>16),t((65280&a)>>8),t(255&a);return 2===u?(a=n(e.charAt(o))<<2|n(e.charAt(o+1))>>4,t(255&a)):1===u&&(a=n(e.charAt(o))<<10|n(e.charAt(o+1))<<4|n(e.charAt(o+2))>>2,t(a>>8&255),t(255&a)),l}function r(t){function n(t){return e.charAt(t)}function o(e){return n(e>>18&63)+n(e>>12&63)+n(e>>6&63)+n(63&e)}var r,i,s,a=t.length%3,u="";for(r=0,s=t.length-a;s>r;r+=3)i=(t[r]<<16)+(t[r+1]<<8)+t[r+2],u+=o(i);switch(a){case 1:i=t[t.length-1],u+=n(i>>2),u+=n(i<<4&63),u+="==";break;case 2:i=(t[t.length-2]<<8)+t[t.length-1],u+=n(i>>10),u+=n(i>>4&63),u+=n(i<<2&63),u+="="}return u}var i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="+".charCodeAt(0),a="/".charCodeAt(0),u="0".charCodeAt(0),l="a".charCodeAt(0),f="A".charCodeAt(0);t.toByteArray=o,t.fromByteArray=r}("undefined"==typeof n?this.base64js={}:n)}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","/../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib")
},{"1YiZ5S":24,buffer:21}],23:[function(e,t,n){(function(){n.read=function(e,t,n,o,r){var i,s,a=8*r-o-1,u=(1<<a)-1,l=u>>1,f=-7,d=n?r-1:0,c=n?-1:1,m=e[t+d];for(d+=c,i=m&(1<<-f)-1,m>>=-f,f+=a;f>0;i=256*i+e[t+d],d+=c,f-=8);for(s=i&(1<<-f)-1,i>>=-f,f+=o;f>0;s=256*s+e[t+d],d+=c,f-=8);if(0===i)i=1-l;else{if(i===u)return s?0/0:1/0*(m?-1:1);s+=Math.pow(2,o),i-=l}return(m?-1:1)*s*Math.pow(2,i-o)},n.write=function(e,t,n,o,r,i){var s,a,u,l=8*i-r-1,f=(1<<l)-1,d=f>>1,c=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,m=o?0:i-1,h=o?1:-1,p=0>t||0===t&&0>1/t?1:0;for(t=Math.abs(t),isNaN(t)||1/0===t?(a=isNaN(t)?1:0,s=f):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),t+=s+d>=1?c/u:c*Math.pow(2,1-d),t*u>=2&&(s++,u/=2),s+d>=f?(a=0,s=f):s+d>=1?(a=(t*u-1)*Math.pow(2,r),s+=d):(a=t*Math.pow(2,d-1)*Math.pow(2,r),s=0));r>=8;e[n+m]=255&a,m+=h,a/=256,r-=8);for(s=s<<r|a,l+=r;l>0;e[n+m]=255&s,m+=h,s/=256,l-=8);e[n+m-h]|=128*p}}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","/../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754")},{"1YiZ5S":24,buffer:21}],24:[function(e,t){(function(e){function n(){}var e=t.exports={};e.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,t="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};if(t){var n=[];return window.addEventListener("message",function(e){var t=e.source;if((t===window||null===t)&&"process-tick"===e.data&&(e.stopPropagation(),n.length>0)){var o=n.shift();o()}},!0),function(e){n.push(e),window.postMessage("process-tick","*")}}return function(e){setTimeout(e,0)}}(),e.title="browser",e.browser=!0,e.env={},e.argv=[],e.on=n,e.addListener=n,e.once=n,e.off=n,e.removeListener=n,e.removeAllListeners=n,e.emit=n,e.binding=function(){throw new Error("process.binding is not supported")},e.cwd=function(){return"/"},e.chdir=function(){throw new Error("process.chdir is not supported")}}).call(this,e("1YiZ5S"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/gulp-browserify/node_modules/browserify/node_modules/process/browser.js","/../node_modules/gulp-browserify/node_modules/browserify/node_modules/process")},{"1YiZ5S":24,buffer:21}]},{},[4]);
//# sourceMappingURL=data:application/json;base64,